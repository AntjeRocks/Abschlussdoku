---
AWSTemplateFormatVersion: 2010-09-09

Parameters:
  ApiGatewayHostedZoneId:
    Type: String
    Default: "Z2FDTNDATAQYW2"
    # http://docs.aws.amazon.com/general/latest/gr/rande.html#apigateway_region
  CertificateArn:
    Type: String
    AllowedValues:
      # live cert
      - "arn:aws:acm:us-east-1:407420265679:certificate/cf94e100-1bde-40f9-acb0-fdae3308be7e"
      # nonlive cert
      - "arn:aws:acm:us-east-1:545150822921:certificate/885e9726-41a9-4473-a376-0b06d78327b3"
  DeploymentStage:
    Type: String
    AllowedValues:
      - LIVE
      - DEVELOP
  Environment:
    Type: String
    AllowedValues:
      - live
      - develop
  ServiceName:
    Type: String
    Default: "imageprocessing"
  TeamName:
    Type: String
    Default: "social"

Resources:
  Api:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Sub "${ServiceName}-api-${Environment}"
      BinaryMediaTypes:
        - "*/*"
      FailOnWarnings: true

  SetfreeApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      PathPart: setfree
      ParentId: !GetAtt Api.RootResourceId
      RestApiId: !Ref Api

  ApiStage:
    Type: "AWS::ApiGateway::Stage"
    Properties:
      DeploymentId: !Ref ApiDeployment
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: "*"
          # https://docs.aws.amazon.com/apigateway/api-reference/resource/stage/#loggingLevel
          LoggingLevel: INFO
          ResourcePath: "/*"
      RestApiId: !Ref Api
      StageName: !Ref DeploymentStage

  ApiDeployment:
    DependsOn: [ApiMethod]
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !Ref Api

  ApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join: ["", ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::ImportValue": "imageprocessing-setFree-function-arn"}, "/invocations"]]
      ResourceId: !Ref SetfreeApiResource
      RestApiId: !Ref Api

  ApiPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName: !ImportValue imageprocessing-setFree-function-arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join: ["", ["arn:aws:execute-api:", {"Ref":"AWS::Region"}, ":", {"Ref":"AWS::AccountId"}, ":", {"Ref":"Api"}, "/*"]]

  BasePathMapping:
    Type: "AWS::ApiGateway::BasePathMapping"
    Properties:
      BasePath: !Sub "${TeamName}-${ServiceName}"
      DomainName: !Ref DomainName
      RestApiId: !Ref Api
      Stage: !Ref ApiStage

  DomainName:
    Type: "AWS::ApiGateway::DomainName"
    Properties:
      DomainName: !Sub "${ServiceName}.${Environment}.${TeamName}.cloud.otto.de"
      CertificateArn: !Ref CertificateArn

  DNSRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      AliasTarget:
        DNSName: !GetAtt DomainName.DistributionDomainName
        HostedZoneId: !Ref ApiGatewayHostedZoneId
      HostedZoneId: !ImportValue {"Fn::Sub": "${Environment}-hosted-zone-id"}
      Name: !Sub "${ServiceName}.${Environment}.${TeamName}.cloud.otto.de"
      Type: A

Outputs:
  ApiId:
    Export:
      Name: !Sub "${ServiceName}-${Environment}-api"
    Value: !Ref Api
  DeploymentStageId:
    Export:
      Name: !Sub "${ServiceName}-${Environment}-api-deployment-stage"
    Value: !Ref DeploymentStage

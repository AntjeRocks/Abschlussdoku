Folie 1 - Begrüßung
Guten Morgen, mein Name ist Antje Radkiewicz.
Ich bin Auszubildende Fachinformatikerin für Systemintegration beim OTTO Versand.
Ich möchte Ihnen, den technischen Mitarbeitern im Bereich E-Commerce von OTTO, meine Ergebnisse bezüglich der Migration eines Teil-Microservices in die AWS präsentieren.
Des Weiteren möchte ich sie bitten mir eventuelle Fragen erst im Anschluss an die Präsentation zu stellen.

Folie 2 - Agenda
Um meine Ihnen Ergebnisse zu vermitteln werde ich erst noch einmal kurz auf die Projektbeschreibung eingehen.
Danach werde ich den setFree Service erläutern und das Migrationsvorgehen beschreiben.
Im Anschluss zeige ich Ihnen, wie ich das Projekt durchgeführt habe und

Folie 3 - Projektbeschreibung
Okay, dann beginne ich jetzt mit der Projektbeschreibung

Folie 4 - Projektbeschreibung: AWS
Derzeit wird die Infrastruktur für den Webshop von otto.de über einen Dienstleister in dessen Rechenzentrum gehostet.
In Zukunft soll die gesamte Infrastruktur für den Shop in der AWS gehostet werden.
Jedes Team wird die Migration selbstverantwortet durchführen.
Die Teams können sich selber für die zu verwendenden Tools und Services entscheiden.

Folie 5 - Projektbeschreibung: Team Social
Ich habe meine Projektarbeit in dem Team Social durchgeführt.
Hier sollte der Microservice imageprocessing als nächstes migriert werden.
Für mein Projekt sollte vorerst nur die Migration eines Teil-Services durchgeführt werden.
Bei diesem Teil-Service handelt es sich im die setFree Funktion.
Nach der erfolgreichen Migration sollte für den gesamten Microservice entschieden werden, ob sich diese Migrationsvorgehensweise anbietet.

Folie 6 - SetFree Teil-Microservice
Nun werde ich den setFree Teil-Microservice kurz beleuchten.

Folie 7 + 8 - setFree: Freistellung
In der Webapplikation StyleCreator auf otto.de ist es möglich Collagen aus Einzelbildern zu erstellen.
Auf dem Bild hier sieht man eine Beispielcollage.
Es können allerdings nur Bilder verwendet werden, die auf dem zentralen OTTO Imageserver verfügbar sind.
Diese Einzelbilder können auch freigestellt werden.
Ein Bild frei zu stellen bedeutet den Hintergrund eines Bildes zu entfernen. *klick* -> Folie 8
Der setFree-Teil-Microservice lädt die Bilder herunter und schneidet sie dann man mit Imagemagick frei.
Die Bilder werden dann direkt im Browser sichtbar gemacht.

Folie 9 - setFree: ImageMagick
ImageMagick ist ein freies Werkzeug zur Erstellung von Rastergrafiken.
Der Code für den setFree Microservice ist in Node.js geschrieben.
Es gibt ein Node.js Package mit dem man Imagemagick nutzen kann.
Hierfür muss allerdings eines der Pakete auf dem ausführenden Gerät installiert sein.
Es ist auf diversen Linux-Distribution bereits vorinstalliert.

Folie 10 - Projektplanung
Ich möchte nun weiterleiten auf den nächsten Abschnitt und kurz meine Projektplanung erläutern.

Folie 11 - Projektplanung: Zeitplan
Auf der Tabelle rechts sieht man die von mir erstellte Zeitplanung.
Als ich sie erstellt hatte, hatte ich schon eine Idee wie ich ungefähr vorgehen werde und habe daher viele Arbeitsschritte optimistisch bewertet.
Man sieht dass bei vielen Punkten nur eine Stunde Zeit geplant war.
Das war natürlich kritisch, wenn an diesen Stellen unerwartete Blocker aufgetauscht wären, hätte es den Plan durcheinander gebracht.

Folie 12 - Projektplanung: Technologie
Während der Planungsphase habe ich mir überlegt, wie ich die Migration technisch umsetze.
Ich hatte zwei Technologien zur Auswahl.
Ich hätte den Teil-Microservice in einen EC2-Container oder als Lambda Funktion bereitstellen können.
Ein EC2 Container ist eine Umgebung die ununterbrochen läuft.
Eine Lambda Funktion erstellt einen EC2 Container und löscht ihn im Anschluss wieder.
ImageMagick ist bereits auf den Containern in der AWS installiert.
Ich habe beide Möglichkeiten mittels einer Nutzwertanalyse verglichen.

Folie 13 - Projektplanung: Auswahlkriterien
Um die Varianten miteinander vergleichen zu können habe ich die Auswahlkriterien nach Vorgabe der Abteilung aufgestellt.
Als Wertungsskala habe ich mich für das Schulnotensystem entschieden.

Folie 14 - Projektplanung: Nutzwertanalyse
Anschließend habe ich die Daten zusammengefasst und anhand der Fakten den Nutzwert errechnet.
Das Resultat dieser Analyse war, dass sich die Implementierung als Lamdba Funktion anbietet.

Folie 15 - Projektdurchführung
Als nächstes möchte die Projektdurchführung veranschaulichen.

Folie 16 - Inhaltsübersicht
Hier ist die Reihenfolge zu sehen, in der ich die einzelnen Punkte in etwa abgearbeitet habe.
Ich werde kurz jeden Punkt erläutern und auf den nächsten Folien kann ich jeweils ein kurzes Code-Beispiel für die Punkte zeigen.
Als erstes habe ich ein Repository in der AWS angelegt.
Dann habe ich den Service verändert so dass er als Lambda Funktion aufgerufen werden kann.
Ich habe ein Pipeline-Template geschrieben und diese manuell in die AWS deployed.
Danach habe ich ein AWS Api-Gateway Template erstellt und dieses in der Pipeline lauffähig gemacht.
Nach einigem Troubleshooting habe ich dann noch die Binary Media Types Einstellung verändert.
Der Service war dann zu diesem Zeitpunkt funktionsfähig.
Anschließend habe ich noch Templates für das Alarming, das Logging und Monitoring geschrieben.

Folie 17 - CloudFormation
Bevor ich die einzelnen Code-Schnipsel vorstelle möchte ich gerne erklären was ich mit Skript meine.
In der AWS können Ressourcen über so genannte CloudFormation Vorlagen erzeugt und als Stacks zusammengefasst werden.
CloudFormation Templates können in json oder yaml Format verfasst werden.
Die kommenden Skriptbeispiele werden alle im yaml-Format sein, da sich das Team darauf verständigt hat dieses Format zu nutzen.

Folie 18 - Repository
Dieses ist das kleinste Code-Beispiel.
Hier wird genau eine Ressource innerhalb eines Stacks erzeugt und zwar ein AWS CodeCommit Repository.
Dieses wird wie der Kommentar andeutet auch nur dann benötigt werden, wenn wir das Repository neu anlegen.

Folie 19 - Pipeline: Definition
Im Folgenden möchte kurz anschneiden wie ich die Pipeline definiert habe.
Ich werde nicht auf jede einzelne Zeile eingehen.
Hier sieht man, dass eine Pipeline definiert wird und dass ein S3 Bucket als Speicher für die Artefakte genutzt wird.
Die Zeile RestartExecutionOnUpdate managed , dass die Pipeline erneut ausgeführt wird, wenn ein Update eingespielt wird.
Dann können Stages definiert werden.
Stages benötigen immer einen Namen und eine Action.

Folie 20 - Pipeline: Stage
Hier ist eine Beispiel Stage.
Es ist der Build step durch den der Service erstellt wird.
Ich habe ein CodeBuildProjekt als Configuration hinterlegt.

Folie 21 - Pipeline: CodeBuildProjekt
